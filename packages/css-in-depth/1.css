.inline-block {
    background-color: gray!important;
}

/* 全局border-box */
:root {
    font-size: 0.875em; /* 14px/16px, 1rem: root em, = 14px */
    font-size: calc(0.5em + 1vw); /* 不支持calc时，回退到上面的font-size */
    box-sizing: border-box;
} 
/* 新开发页面, 全局设置box-sizing */
*,
::after,
::before {
    box-sizing: inherit;
}
ul,li {
    list-style: none;
    margin: 0;
    padding: 0;
}
/* 为了不影响第三方库的box-sizing */
.third-lib-root-element {
    box-sizing: content-box; /* 盒模型不继承，但是上面设置* box-sizing:inherit;强制继承，因此组件内的元素继承根元素的content-box */
}

/* 相对单位 */
/* 通常组件font-size用rem, padding用em, border用px */
.em {
    width: 50rem; /* 700px */
    font-size: .857rem; /* 12px */
    padding: 1em;
    border: 1px solid green;
}
.em-inner {
    font-size: 0.8em; /* 相对于父级12px缩小0.8 */
}
/* 给组件添加class，层叠font-size, 实现组件大、中、小等的实时切换 */
.em.large {
    font-size: 1rem;
}
.em.small {
    font-size: 0.8rem;
}

/* 表格布局 */
.css-table-wrapper {
    margin: 0 -1em; /* 为了抵消子级的border-spacing， 里面对齐是对齐了但是会拉长该元素本身，可能出现滚动条*/
}
.css-table {
    padding: 0;
    display: table; /* 好好理解一下table布局 */
    table-layout: fixed;/* 表格和列的宽度通过表格的宽度来设置，某一列的宽度仅由该列首行的单元格决定。在当前列中，该单元格所在行之后的行并不会影响整个列宽。加快表格渲染 */
    width: 100%; /* table默认不会占据一行的宽度 */
    border-spacing: 1em 0; /* 最外侧border也会有spacing, 可以加父容器并设置负外边距 */
}
.css-table-cell {
    display: table-cell;
    border: 1px solid red;
    width: 60px;
    margin-left: 10px; /* 不会生效 */
    vertical-align: middle;
}

/* 负外边距效果 */
.margin {
    display: inline;
}
.margin1 {
    border: 2px solid blueviolet;
    /* margin-right: -1em; 右侧的margin2压着左侧的margin1 */
}
.margin2 {
    border: 2px solid red;
    /* margin-left: -1em; 还是margin2压着margin1元素 */
}
.margin3 {
    /* margin-top: -1em; 覆盖上面的 */
    border: 1px solid greenyellow;
    margin-bottom: -1em; /* margin4覆盖该元素 */
}

/* owl猫头鹰选择器 */
.owl-selector {
    border: 1px solid black
}
.owl-selector > * + * {
    margin-top: 1em;
}



/* 第二部分 精通布局 */
/* 浮动 */
html, body {
    height: 100%;
}
/* 双容器模式，将网页内容居中 */
body {
    background-color: gray;
    margin: 0;
}
.container {
    background-color: #fff;
    max-width: 1600px; /* 大于1000px的屏幕，左右出现留白，小于1000时填满整个屏幕 */
    margin: 0 auto;
    overflow: hidden; /* 防止上下margin溢出 */
    min-height: 100%;
}
/* 双容器模式结束 */
.float {
    float: left;
    height: 100px;
    border: 1px solid yellow;
}
.float-help {
    border: 1px solid blue;
    overflow: hidden; /* 创建BFC，不会与.float重叠。display:inline-blcok,float,会使该元素的width变为100%，导致换行。 */
}
.float-wrapper {
    background-color: lightskyblue;
}
.float-margin-top {
    margin-top: 1em; /* 突破父级 */
    border: 1px solid lightcoral;
}
.float-ele {
    float: left;
    width: 50%;
    margin-top: 3em;
}
/* 清浮动 */
.float-wrapper::after {
    /* 非浮动元素外边距折叠，浮动元素外边距不会折叠到容器的外部 */
    display: block; /* 将伪元素的display设置为非inline，并给定一个content值，以便让伪元素出现在文档中 */
    content: " "; /* 空格解决opera的bug */
    clear: both;
}
/* 清浮动，改进版，不折叠非浮动元素外边距 */
.float-wrapper::before,
.float-wrapper::after {
    /* 非浮动元素外边距被阻止折叠 */
    display: table; /* 外边距无法通过单元格元素折叠 ，或者table-cell, 但是table-cell不是block元素，clear：both只对block元素生效*/
    content: " "; /* 空格解决opera的bug */
}
.float-wrapper::after {
    clear: both;
}

/* 浮动陷阱 */
.float-ele:nth-child(2n) {
    clear: left; /* 该元素移动到浮动元素的右边，放不下了，换行 */
}

/* 利用float实现的网格系统 */
.row {
    margin-left: -0.75em;
    margin-right: -0.75em; /* 抵消首尾列的padding空白 */
}
.row::after {
    content: " ";
    display: block;
    clear: both;
}

[class*="column-"] {
    float: left;
    padding: 0 0.75em;
    margin-top: 0;
}
.column-1 { width: 8.3333%; }
.column-2 { width: 16.6667%; }
.column-3 { width: 25%; }
.column-4 { width: 33.3333%; }
.column-5 { width: 41.6667%; }
.column-6 { width: 50%; }
.column-7 { width: 58.3333%; }
.column-8 { width: 66.6667%; }
.column-9 { width: 75%; }
.column-10 { width: 83.3333%; }
.column-11 { width: 91.6667% }
.column-12 { width: 100%; }


/* flex布局 */
.flex-box {
    display: flex;
    list-style-type: none;
    margin: 0;
    padding: 0;
}
.flex-box > li + li {
    margin-left: 1em;
}
.flex-box >li:last-child {
    margin-left: auto; /* 填充左侧空间,把最后一个推到最右边 */
}

.flex-box-empty {
    display: flex;
    min-height: 30px;
    border: 1px solid red;
    padding: 2px;
}
.flex-box-empty > li {
    flex: 1 1 40%;
    border: 1px solid #0090c9;
}

.flex-box-hascontent {
    border: 1px solid red;
    width: 100px;
    height: 200px;
    padding: 2px;
    margin: 10px auto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.flex-box-hascontent > li {
    border: 1px solid skyblue;
    flex: 1 1 30px; /* 总和超过100px,要收缩，收缩不会小于内容（英文不换行，汉字一个一换行）的大小，此时会溢出 */
    /* 或者flex: 30px; */
    /* max-width: 25%; 防止内容撑开宽度 */
    /* width: 0px; // 防止内容撑开宽度， 如果容器空间不足，则会收缩（收缩到不再溢出）,此时对超出的元素指定了width，
                // 如果收缩过程中容器空间够了，则停止收缩到合适的宽度，不一定是width宽度
                // 如果收缩到width时空间仍然不够，则停止在width宽度的位置。 
                */
}

.login-input {
    display: block; /* input宽度由size决定，大致能容纳的字符数，因此要加上width占据一行 */
    width: 100%;
}


/* 网格布局 */
.grid {
    display: grid;
    grid-template-rows: 200px 1fr; /* fraction,分数单位，类似flex-grow的因子 */
    grid-template-columns: 1fr 1fr 1fr; /* 3等宽列 */
    grid-gap: 0.5em;
}
.grid > * {
    border: 1px solid blue;
}

.grid-container {
    display: grid;
    /* 声明网格轨道 */
    grid-template-rows: 1fr 1fr repeat(2, [row] 4fr); /* 关键字auto: 由内容撑开 */
    grid-template-columns: [start] 2fr [center] 1fr [end right-start]; /* []里面是分割网格轨道的 网格线名称 多网格线名称 */
    grid-gap: 0.5em;
}
.grid-container > * {
    background-color: aqua;
}
.grid-container header,
.grid-container nav {
    grid-column: 1 / right-start; /* 第1网格线gird-line,到第3网格线 */
}
.grid-container main {
    grid-column: start / center;
    /* grid-row: 3 / 5; */
    grid-row: row 1 / 5; /* 第一个叫row的水平网格线的，或者水平网格线3 */
}
.grid-container .aside-title1 {
    grid-column: span 1; /* 关键字span, 指定跨越1网格轨道grid track, 没有指定起始位置布局算法（placement algorithm）自动将其放到网格上可以容纳该元素的第一处可用空间 */
    grid-row: span 1;
}
.grid-container .aside-title2 {
    /* gird-column是缩写 */
    /* grid-column-start: 2;
    grid-column-end: 3;
    grid-row: span 1; */
    /* 或者grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end | itemname; */
    grid-area: 4 / 2 / span 1 / span 1;
}

/* 命名的网格区域 */
.grid-named-area {
    border: 1px solid red;
    display: grid;
    grid-template-areas: "top  top    right"
                         "left .      right"
                         "left bottom bottom1";
    grid-template-rows: 1fr 1fr 4fr; /* 关键字auto: 由内容撑开 */
    grid-template-columns: repeat(3, 1fr); /* []里面是分割网格轨道的 网格线名称 多网格线名称 */
    grid-gap: 0.5em;
}
.grid-named-area > * {
    background-color: aqua;
}
.grid-named-area header {
    grid-area: top;
}
.grid-named-area nav {
    grid-area: right;
}
.grid-named-area main {
    grid-area: left;
}
.grid-named-area .aside-title1 {
    grid-area: bottom;
}
.grid-named-area .aside-title2 {
    grid-area: bottom1;
}

/* 隐式网格 */
.grid-implicit figure {
    margin: 0;
    position: relative;
}
.grid-implicit figure figcaption {
    position: absolute;
    bottom: 0;
    width: 100%;
    background-color: rgba(255, 255, 255, 0.5);
}
.grid-implicit img {
    /* width: 100%; */
    height: 100%;
    max-width: 100%;
}
.grid-implicit {
    display: grid;
    /* auto-fill 只要网格放的下，就尽可能多的产生列轨道，可以把200改为20，切换auto-fit和auto-fill查看区别 */
    /* 如果网格元素不够填满所有网格轨道，auto-fill就会导致一些空的网格轨道。如果不希望出现空的网格轨道，可以使用auto-fit关键字代替auto-fill。它会让非空的网格轨道扩展，填满可用空间。*/
    /* 查看auto-fill和auto-fit两者区别：https://gridbyexample.com/examples/example37/ 或者 https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/ */
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* 列自动填充，auto-fit自动适应, 列宽最小是200px */
    /* 隐式行，根据内容自动添加 */
    grid-auto-rows: 1fr;
    grid-gap: 1em;
    /* 此时顺序已不是1234567..., grid默认一行放不下，会放到下一行。grid-auto-flow属性控制该行为，默认row。可以改为column，优先列放置，一列放满才会放到下一行 */
    grid-auto-flow: row dense; /*视口调整到860， 不开该属性th3前面会留空白, dense紧凑的网格布局算法，或者只写一个dense */
}
.grid-implicit .featured {
    grid-row: span 2;
    grid-column: span 2;
}


/* 渐变 */
.gradient {
    width: 200px;
    height: 12px;
    border-radius: 6px;
    background-image: linear-gradient(100grad/* 百分度gradiant, 360deg=400grad=1turn=2πrad */, white, red, blue /* 任意多的节点，隔开 */);
    background-image: linear-gradient(0.25turn, white 0%, red 50%, blue 100%/* blue颜色节点的位置 */);
    /* 条纹：如果在同一个位置设置两个颜色节点，那么渐变会直接从一个颜色变换到另一个，而不是平滑过渡 */
    background-image: linear-gradient(0.25turn, red 20%, white 20%, white 40%, blue 40%);
    /* 重复渐变： repeating-linear-gradient, 进度条效果 */
    background-image: repeating-linear-gradient(-45deg, #57b, #57b 10px, #148 10px, #148 20px);
    /* https://css-tricks.com/stripes-css/ */
}
.radial-gradient {
    width: 300px;
    height: 200px;
    /* 默认呈现椭圆，可以设置成圆渐变 */
    background-image: radial-gradient(white, midnightblue);
    background-image: radial-gradient(circle, white, midnightblue); /* 圆形 */
    background-image: radial-gradient(100px at 25% 25%, white, midnightblue); /* 大小100px, 中心距离左上的距离 */
    background-image: radial-gradient(circle, midnightblue 0, white 75%, red 100%); /* 大小100px, 中心距离左上的距离 */
    background-image: repeating-radial-gradient(circle, midnightblue 0, midnightblue 10px, white 10px, white 20px);
    /* 颜色接近的渐变，不要反差大的渐变 */
}

/* 阴影 */
.shadow {
    margin: 20px;
    width: 40px;
    height: 30px;
    border-radius: 6px; /* 阴影和border完美贴合 */
    box-shadow: inset 0 0 0.5em #124,
                inset 0 0.5em 1em rgba(0,0,0,0.4); /* 1em模糊面积为负值向外扩展了 */
    box-shadow: 0 0 0.5em #124;
    box-shadow: 0.6em 0 0.7em -0.5em #124; /* 右侧阴影，阴影和偏移面积相互抵消，制造单边阴影效果 */
    background-color: #57b;
    box-shadow: 0 0.4em #148;
}
.shadow:hover {
    background-color: #456ab5;
    transform: translateY(0.1em);     /* 按钮下移 */
    box-shadow: 0 0.3em #148;
}

/* blend */
.blend {
    width: 100px;
    height: 80px;
    background-image: url('./wallpaper/th3.jpg');
    background-size: 100%;
    background-color: lightblue;
    /* 为图片着色 */
    background-blend-mode: luminosity; /* 亮度，前背景图的明暗程度和背景颜色的结合 */
}
.blend {
    width: 400px;
    height: 300px;
    background-image: url('./wallpaper/th3.jfif'), url('./wallpaper/th3.jpg');
    background-size: 200px, cover;
    background-repeat: repeat, no-repeat;
    background-position: center, center;
    background-blend-mode: soft-light;
}
.mix-blend-mode {
    width: 400px;
    height: 300px;
    background: url('./wallpaper/th3.jpg') center/cover no-repeat;
    display: table-cell;
    vertical-align: middle;
}
.mix-blend-mode h3 {
    margin: 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 2rem;
    text-align: center;                 
    mix-blend-mode: hard-light;     /* 使用强光混合模式 */
    background-color: #c33;
    color: #808080;       
    border: 0.1em solid #ccc;
    border-width: 0.1em 0;
}

/* 间距 */
.line-height {
    list-style: none;
    margin: 0;
    padding: 0;
}
.line-height > li {
    background-color: grey;
    display: inline; /* 文本行的高度由line-height高度决定 */
    padding: 6px 8px; /* 审查元素看到盒子高度为27约等14+6*2 */
    font-size: 14px;
    line-height: 1.2; /* 16.8px, 此时上下行重叠*/
    line-height: 2; /* 28px > 盒子高度27，上下行不会重叠 */
}

@font-face {     /*  @font-face规则定义一个字体，可以在页面里其他CSS中使用 */
    font-family: 'Roboto';      /* 声明字体名称 */
    font-style: normal;
    font-weight: 300;
  
    src: local('Roboto Light'), local('Roboto-Light'),
        /* Web Open Font Format, woff */
       url(https://fonts.gstatic.com/s/roboto/v15/Hgo13k-tfSpn0qi1SFdUfZBw1xU1rKptJj_0jans920.woff2) format('woff2');    /* 可以找到字体文件的位置,系统中找不到local里面的字体就去url找woff2字体 */
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC,
       U+2000-206F, U+2074, U+20AC, U+2212, U+2215;    /* @font-face规则使用的Unicode编码范围 */
  } 